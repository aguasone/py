{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"vide",
				"video_size"
			],
			[
				"nu",
				"number_fps_second"
			],
			[
				"start",
				"startswith\t(camera.py)"
			],
			[
				"know",
				"knownall"
			],
			[
				"kn",
				"known_names"
			],
			[
				"face",
				"face_recognition"
			],
			[
				"knonw",
				"knownall"
			],
			[
				"dete",
				"detections"
			]
		]
	},
	"buffers":
	[
		{
			"file": "camera.py",
			"settings":
			{
				"buffer_size": 22890,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Socket.IO Chat Example</title>\n  <style>\n  /* Fix user-agent */\n\n* {\n  box-sizing: border-box;\n}\n\nhtml {\n  font-weight: 300;\n  -webkit-font-smoothing: antialiased;\n}\n\nhtml, input {\n  font-family:\n    \"HelveticaNeue-Light\",\n    \"Helvetica Neue Light\",\n    \"Helvetica Neue\",\n    Helvetica,\n    Arial,\n    \"Lucida Grande\",\n    sans-serif;\n}\n\nhtml, body {\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\nul {\n  list-style: none;\n  word-wrap: break-word;\n}\n\n/* Pages */\n\n.pages {\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n}\n\n.page {\n  height: 100%;\n  position: absolute;\n  width: 100%;\n}\n\n/* Login Page */\n\n.login.page {\n  background-color: #000;\n}\n\n.login.page .form {\n  height: 100px;\n  margin-top: -100px;\n  position: absolute;\n\n  text-align: center;\n  top: 50%;\n  width: 100%;\n}\n\n.login.page .form .usernameInput {\n  background-color: transparent;\n  border: none;\n  border-bottom: 2px solid #fff;\n  outline: none;\n  padding-bottom: 15px;\n  text-align: center;\n  width: 400px;\n}\n\n.login.page .title {\n  font-size: 200%;\n}\n\n.login.page .usernameInput {\n  font-size: 200%;\n  letter-spacing: 3px;\n}\n\n.login.page .title, .login.page .usernameInput {\n  color: #fff;\n  font-weight: 100;\n}\n\n/* Chat page */\n\n.chat.page {\n  display: none;\n}\n\n/* Font */\n\n.messages {\n  font-size: 150%;\n}\n\n.inputMessage {\n  font-size: 100%;\n}\n\n.log {\n  color: gray;\n  font-size: 70%;\n  margin: 5px;\n  text-align: center;\n}\n\n/* Messages */\n\n.chatArea {\n  height: 100%;\n  padding-bottom: 60px;\n}\n\n.messages {\n  height: 100%;\n  margin: 0;\n  overflow-y: scroll;\n  padding: 10px 20px 10px 20px;\n}\n\n.message.typing .messageBody {\n  color: gray;\n}\n\n.username {\n  font-weight: 700;\n  overflow: hidden;\n  padding-right: 15px;\n  text-align: right;\n}\n\n/* Input */\n\n.inputMessage {\n  border: 10px solid #000;\n  bottom: 0;\n  height: 60px;\n  left: 0;\n  outline: none;\n  padding-left: 10px;\n  position: absolute;\n  right: 0;\n  width: 100%;\n}  </style>\n</head>\n<body>\n  <ul class=\"pages\">\n    <li class=\"chat page\">\n      <div class=\"chatArea\">\n        <ul class=\"messages\"></ul>\n      </div>\n      <input class=\"inputMessage\" placeholder=\"Type here...\"/>\n    </li>\n    <li class=\"login page\">\n      <div class=\"form\">\n        <h3 class=\"title\">What's your nickname?</h3>\n        <input class=\"usernameInput\" type=\"text\" maxlength=\"14\" />\n      </div>\n    </li>\n  </ul>\n\n  <script src=\"https://code.jquery.com/jquery-1.10.2.min.js\"></script>\n  <script src=\"/socket.io/socket.io.js\"></script>\n  <script >$(function() {\n  var FADE_TIME = 150; // ms\n  var TYPING_TIMER_LENGTH = 400; // ms\n  var COLORS = [\n    '#e21400', '#91580f', '#f8a700', '#f78b00',\n    '#58dc00', '#287b00', '#a8f07a', '#4ae8c4',\n    '#3b88eb', '#3824aa', '#a700ff', '#d300e7'\n  ];\n\n  // Initialize variables\n  var $window = $(window);\n  var $usernameInput = $('.usernameInput'); // Input for username\n  var $messages = $('.messages'); // Messages area\n  var $inputMessage = $('.inputMessage'); // Input message input box\n\n  var $loginPage = $('.login.page'); // The login page\n  var $chatPage = $('.chat.page'); // The chatroom page\n\n  // Prompt for setting a username\n  var username;\n  var connected = false;\n  var typing = false;\n  var lastTypingTime;\n  var $currentInput = $usernameInput.focus();\n\n  var socket = io();\n\n  function addParticipantsMessage (data) {\n    var message = '';\n    if (data.numUsers === 1) {\n      message += \"there's 1 participant\";\n    } else {\n      message += \"there are \" + data.numUsers + \" participants\";\n    }\n    log(message);\n  }\n\n  // Sets the client's username\n  function setUsername () {\n    username = cleanInput($usernameInput.val().trim());\n\n    // If the username is valid\n    if (username) {\n      $loginPage.fadeOut();\n      $chatPage.show();\n      $loginPage.off('click');\n      $currentInput = $inputMessage.focus();\n\n      // Tell the server your username\n      socket.emit('add user', username);\n    }\n  }\n\n  // Sends a chat message\n  function sendMessage () {\n    var message = $inputMessage.val();\n    // Prevent markup from being injected into the message\n    message = cleanInput(message);\n    // if there is a non-empty message and a socket connection\n    if (message && connected) {\n      $inputMessage.val('');\n      addChatMessage({\n        username: username,\n        message: message\n      });\n      // tell server to execute 'new message' and send along one parameter\n      socket.emit('new message', message);\n    }\n  }\n\n  // Log a message\n  function log (message, options) {\n    var $el = $('<li>').addClass('log').text(message);\n    addMessageElement($el, options);\n  }\n\n  // Adds the visual chat message to the message list\n  function addChatMessage (data, options) {\n    // Don't fade the message in if there is an 'X was typing'\n    var $typingMessages = getTypingMessages(data);\n    options = options || {};\n    if ($typingMessages.length !== 0) {\n      options.fade = false;\n      $typingMessages.remove();\n    }\n\n    var $usernameDiv = $('<span class=\"username\"/>')\n      .text(data.username)\n      .css('color', getUsernameColor(data.username));\n    var $messageBodyDiv = $('<span class=\"messageBody\">')\n      .text(data.message);\n\n    var typingClass = data.typing ? 'typing' : '';\n    var $messageDiv = $('<li class=\"message\"/>')\n      .data('username', data.username)\n      .addClass(typingClass)\n      .append($usernameDiv, $messageBodyDiv);\n\n    addMessageElement($messageDiv, options);\n  }\n\n  // Adds the visual chat typing message\n  function addChatTyping (data) {\n    data.typing = true;\n    data.message = 'is typing';\n    addChatMessage(data);\n  }\n\n  // Removes the visual chat typing message\n  function removeChatTyping (data) {\n    getTypingMessages(data).fadeOut(function () {\n      $(this).remove();\n    });\n  }\n\n  // Adds a message element to the messages and scrolls to the bottom\n  // el - The element to add as a message\n  // options.fade - If the element should fade-in (default = true)\n  // options.prepend - If the element should prepend\n  //   all other messages (default = false)\n  function addMessageElement (el, options) {\n    var $el = $(el);\n\n    // Setup default options\n    if (!options) {\n      options = {};\n    }\n    if (typeof options.fade === 'undefined') {\n      options.fade = true;\n    }\n    if (typeof options.prepend === 'undefined') {\n      options.prepend = false;\n    }\n\n    // Apply options\n    if (options.fade) {\n      $el.hide().fadeIn(FADE_TIME);\n    }\n    if (options.prepend) {\n      $messages.prepend($el);\n    } else {\n      $messages.append($el);\n    }\n    $messages[0].scrollTop = $messages[0].scrollHeight;\n  }\n\n  // Prevents input from having injected markup\n  function cleanInput (input) {\n    return $('<div/>').text(input).text();\n  }\n\n  // Updates the typing event\n  function updateTyping () {\n    if (connected) {\n      if (!typing) {\n        typing = true;\n        socket.emit('typing');\n      }\n      lastTypingTime = (new Date()).getTime();\n\n      setTimeout(function () {\n        var typingTimer = (new Date()).getTime();\n        var timeDiff = typingTimer - lastTypingTime;\n        if (timeDiff >= TYPING_TIMER_LENGTH && typing) {\n          socket.emit('stop typing');\n          typing = false;\n        }\n      }, TYPING_TIMER_LENGTH);\n    }\n  }\n\n  // Gets the 'X is typing' messages of a user\n  function getTypingMessages (data) {\n    return $('.typing.message').filter(function (i) {\n      return $(this).data('username') === data.username;\n    });\n  }\n\n  // Gets the color of a username through our hash function\n  function getUsernameColor (username) {\n    // Compute hash code\n    var hash = 7;\n    for (var i = 0; i < username.length; i++) {\n       hash = username.charCodeAt(i) + (hash << 5) - hash;\n    }\n    // Calculate color\n    var index = Math.abs(hash % COLORS.length);\n    return COLORS[index];\n  }\n\n  // Keyboard events\n\n  $window.keydown(function (event) {\n    // Auto-focus the current input when a key is typed\n    if (!(event.ctrlKey || event.metaKey || event.altKey)) {\n      $currentInput.focus();\n    }\n    // When the client hits ENTER on their keyboard\n    if (event.which === 13) {\n      if (username) {\n        sendMessage();\n        socket.emit('stop typing');\n        typing = false;\n      } else {\n        setUsername();\n      }\n    }\n  });\n\n  $inputMessage.on('input', function() {\n    updateTyping();\n  });\n\n  // Click events\n\n  // Focus input when clicking anywhere on login page\n  $loginPage.click(function () {\n    $currentInput.focus();\n  });\n\n  // Focus input when clicking on the message input's border\n  $inputMessage.click(function () {\n    $inputMessage.focus();\n  });\n\n  // Socket events\n\n  // Whenever the server emits 'login', log the login message\n  socket.on('login', function (data) {\n    connected = true;\n    // Display the welcome message\n    var message = \"Welcome to Socket.IO Chat ï¿½ \";\n    log(message, {\n      prepend: true\n    });\n    addParticipantsMessage(data);\n  });\n\n  // Whenever the server emits 'new message', update the chat body\n  socket.on('new message', function (data) {\n    addChatMessage(data);\n  });\n\n  // Whenever the server emits 'user joined', log it in the chat body\n  socket.on('user joined', function (data) {\n    log(data.username + ' joined');\n    addParticipantsMessage(data);\n  });\n\n  // Whenever the server emits 'user left', log it in the chat body\n  socket.on('user left', function (data) {\n    log(data.username + ' left');\n    addParticipantsMessage(data);\n    removeChatTyping(data);\n  });\n\n  // Whenever the server emits 'typing', show the typing message\n  socket.on('typing', function (data) {\n    addChatTyping(data);\n  });\n\n  // Whenever the server emits 'stop typing', kill the typing message\n  socket.on('stop typing', function (data) {\n    removeChatTyping(data);\n  });\n\n  socket.on('disconnect', function () {\n    log('you have been disconnected');\n  });\n\n  socket.on('reconnect', function () {\n    log('you have been reconnected');\n    if (username) {\n      socket.emit('add user', username);\n    }\n  });\n\n  socket.on('reconnect_error', function () {\n    log('attempt to reconnect has failed');\n  });\n\n});\n</script>\n</body>\n</html>\n",
			"settings":
			{
				"buffer_size": 10178,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/admin/Desktop/face/work_crop_align_resize/test.py",
			"settings":
			{
				"buffer_size": 12889,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cli.py",
			"settings":
			{
				"buffer_size": 2872,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/admin/Downloads/dev/Smart-Bell-master/python/videostream.py",
			"settings":
			{
				"buffer_size": 2410,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/admin/Downloads/dev/Smart-Bell-master/python/usbcamera.py",
			"settings":
			{
				"buffer_size": 1327,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\"\"\"\nProxy camera platform that enables image processing of camera data.\nFor more details about this platform, please refer to the documentation\nhttps://home-assistant.io/components/proxy\n\"\"\"\nimport logging\nimport asyncio\nimport aiohttp\nimport async_timeout\n\nREQUIREMENTS = ['pillow==5.0.0']\n\n_LOGGER = logging.getLogger(__name__)\n\nCONF_MAX_IMAGE_WIDTH = \"max_image_width\"\nCONF_IMAGE_QUALITY = \"image_quality\"\nCONF_IMAGE_REFRESH_RATE = \"image_refresh_rate\"\nCONF_FORCE_RESIZE = \"force_resize\"\nCONF_MAX_STREAM_WIDTH = \"max_stream_width\"\nCONF_STREAM_QUALITY = \"stream_quality\"\nCONF_CACHE_IMAGES = \"cache_images\"\n\nDEFAULT_BASENAME = \"Camera Proxy\"\nDEFAULT_QUALITY = 75\n\nasync def async_setup_platform(hass, config, async_add_devices,\n                               discovery_info=None):\n    \"\"\"Set up the Proxy camera platform.\"\"\"\n    async_add_devices([ProxyCamera(hass, config)])\n\n\ndef _resize_image(image, opts):\n    \"\"\"Resize image.\"\"\"\n    from PIL import Image\n    import io\n\n    if not opts:\n        return image\n\n    quality = opts.quality or DEFAULT_QUALITY\n    new_width = opts.max_width\n\n    img = Image.open(io.BytesIO(image))\n    imgfmt = str(img.format)\n    if imgfmt != 'PNG' and imgfmt != 'JPEG':\n        _LOGGER.debug(\"Image is of unsupported type: %s\", imgfmt)\n        return image\n\n    (old_width, old_height) = img.size\n    old_size = len(image)\n    if old_width <= new_width:\n        if opts.quality is None:\n            _LOGGER.debug(\"Image is smaller-than / equal-to requested width\")\n            return image\n        new_width = old_width\n\n    scale = new_width / float(old_width)\n    new_height = int((float(old_height)*float(scale)))\n\n    img = img.resize((new_width, new_height), Image.ANTIALIAS)\n    imgbuf = io.BytesIO()\n    img.save(imgbuf, \"JPEG\", optimize=True, quality=quality)\n    newimage = imgbuf.getvalue()\n    if not opts.force_resize and len(newimage) >= old_size:\n        _LOGGER.debug(\"Using original image(%d bytes) \"\n                      \"because resized image (%d bytes) is not smaller\",\n                      old_size, len(newimage))\n        return image\n\n    _LOGGER.debug(\"Resized image \"\n                  \"from (%dx%d - %d bytes) \"\n                  \"to (%dx%d - %d bytes)\",\n                  old_width, old_height, old_size,\n                  new_width, new_height, len(newimage))\n    return newimage\n\n\nclass ImageOpts():\n    \"\"\"The representation of image options.\"\"\"\n\n    def __init__(self, max_width, quality, force_resize):\n        \"\"\"Initialize image options.\"\"\"\n        self.max_width = max_width\n        self.quality = quality\n        self.force_resize = force_resize\n\n    def __bool__(self):\n        \"\"\"Bool evalution rules.\"\"\"\n        return bool(self.max_width or self.quality)\n\n\nclass ProxyCamera(Camera):\n    \"\"\"The representation of a Proxy camera.\"\"\"\n\n    def __init__(self, hass, config):\n        \"\"\"Initialize a proxy camera component.\"\"\"\n        super().__init__()\n        self.hass = hass\n        self._proxied_camera = config.get(CONF_ENTITY_ID)\n        self._name = (\n            config.get(CONF_NAME) or\n            \"{} - {}\".format(DEFAULT_BASENAME, self._proxied_camera))\n        self._image_opts = ImageOpts(\n            config.get(CONF_MAX_IMAGE_WIDTH),\n            config.get(CONF_IMAGE_QUALITY),\n            config.get(CONF_FORCE_RESIZE))\n\n        self._stream_opts = ImageOpts(\n            config.get(CONF_MAX_STREAM_WIDTH),\n            config.get(CONF_STREAM_QUALITY),\n            True)\n\n        self._image_refresh_rate = config.get(CONF_IMAGE_REFRESH_RATE)\n        self._cache_images = bool(\n            config.get(CONF_IMAGE_REFRESH_RATE)\n            or config.get(CONF_CACHE_IMAGES))\n        self._last_image_time = 0\n        self._last_image = None\n        self._headers = (\n            {HTTP_HEADER_HA_AUTH: self.hass.config.api.api_password}\n            if self.hass.config.api.api_password is not None\n            else None)\n\n    def camera_image(self):\n        \"\"\"Return camera image.\"\"\"\n        return run_coroutine_threadsafe(\n            self.async_camera_image(), self.hass.loop).result()\n\n    async def async_camera_image(self):\n        \"\"\"Return a still image response from the camera.\"\"\"\n        now = dt_util.utcnow()\n\n        if (self._image_refresh_rate and\n                now < self._last_image_time + self._image_refresh_rate):\n            return self._last_image\n\n        self._last_image_time = now\n        url = \"{}/api/camera_proxy/{}\".format(\n            self.hass.config.api.base_url, self._proxied_camera)\n        try:\n            websession = async_get_clientsession(self.hass)\n            with async_timeout.timeout(10, loop=self.hass.loop):\n                response = await websession.get(url, headers=self._headers)\n            image = await response.read()\n        except asyncio.TimeoutError:\n            _LOGGER.error(\"Timeout getting camera image\")\n            return self._last_image\n        except aiohttp.ClientError as err:\n            _LOGGER.error(\"Error getting new camera image: %s\", err)\n            return self._last_image\n\n        image = await self.hass.async_add_job(\n            _resize_image, image, self._image_opts)\n\n        if self._cache_images:\n            self._last_image = image\n        return image\n\n    async def handle_async_mjpeg_stream(self, request):\n        \"\"\"Generate an HTTP MJPEG stream from camera images.\"\"\"\n        websession = async_get_clientsession(self.hass)\n        url = \"{}/api/camera_proxy_stream/{}\".format(\n            self.hass.config.api.base_url, self._proxied_camera)\n        stream_coro = websession.get(url, headers=self._headers)\n\n        if not self._stream_opts:\n            await async_aiohttp_proxy_web(self.hass, request, stream_coro)\n            return\n\n        response = aiohttp.web.StreamResponse()\n        response.content_type = ('multipart/x-mixed-replace; '\n                                 'boundary=--frameboundary')\n        await response.prepare(request)\n\n        async def write(img_bytes):\n            \"\"\"Write image to stream.\"\"\"\n            await response.write(bytes(\n                '--frameboundary\\r\\n'\n                'Content-Type: {}\\r\\n'\n                'Content-Length: {}\\r\\n\\r\\n'.format(\n                    self.content_type, len(img_bytes)),\n                'utf-8') + img_bytes + b'\\r\\n')\n\n        with async_timeout.timeout(10, loop=self.hass.loop):\n            req = await stream_coro\n\n        try:\n            # This would be nicer as an async generator\n            # But that would only be supported for python >=3.6\n            data = b''\n            stream = req.content\n            while True:\n                chunk = await stream.read(102400)\n                if not chunk:\n                    break\n                data += chunk\n                jpg_start = data.find(b'\\xff\\xd8')\n                jpg_end = data.find(b'\\xff\\xd9')\n                if jpg_start != -1 and jpg_end != -1:\n                    image = data[jpg_start:jpg_end + 2]\n                    image = await self.hass.async_add_job(\n                        _resize_image, image, self._stream_opts)\n                    await write(image)\n                    data = data[jpg_end + 2:]\n        except asyncio.CancelledError:\n            _LOGGER.debug(\"Stream closed by frontend.\")\n            req.close()\n            response = None\n\n        finally:\n            if response is not None:\n                await response.write_eof()\n\n    @property\n    def name(self):\n        \"\"\"Return the name of this camera.\"\"\"\n        return self._name",
			"file": "test.py",
			"file_size": 1022,
			"file_write_time": 131721547439851085,
			"settings":
			{
				"buffer_size": 7507,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# # if request.headers.get('accept') != 'text/event-stream':\n# #     return web.Response(status=406)\n\n# ws = request.app['feed']\n# control = request.app['control']\n\n# if ffmpeg_feed:\n#   stream = request.content\n# else:\n#   _camera = WebcamVideoStream(src=0).start()\n\n# try:\n#   data = b''\n#   count_unknown = 0\n#   frames = 0\n\n#   _box = np.array([])\n\n#   if ffmpeg_feed:\n#     while True:\n#       end_timer = time.time()\n#       if (end_timer - start_timer) > timer:\n#         if _capture:\n#           el = min(_capture)\n#           error = _capture.pop(el, None)\n#           if error is not None:\n#             if el.startswith( '0.unknown' ):\n#               await face_recognition.delete_unknown_names(el)\n#         start_timer = time.time()\n#       if shutdown:\n#         break\n#       await asyncio.sleep(number_fps_second)\n#       chunk = await stream.read(102400)\n#       if not chunk:\n#         break\n#       data += chunk\n#       jpg_start = data.find(b'\\xff\\xd8')\n#       jpg_end = data.find(b'\\xff\\xd9')\n#       if jpg_start != -1 and jpg_end != -1:\n#         image = data[jpg_start:jpg_end + 2]\n#         image = cv2.imdecode(np.frombuffer(image, dtype=np.uint8), cv2.IMREAD_COLOR)\n\n#         image, _frames, _last_image, _count_unknown, _box, _text, _result = await read_frame(image, _frames, _last_image, _count_unknown, _box, _text, _result, control)\n\n#         result, img_str = cv2.imencode('.jpg', image)\n\n#         try:\n#           await ws.send_bytes(img_str.tostring())\n#         except Exception:\n#           ws = request.app['feed']\n#         data = data[jpg_end + 2:]\n#       await asyncio.sleep(0)\n#\nlogger.info (\"todo\")",
			"settings":
			{
				"buffer_size": 1647,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\"\"\"\nMock up a video feed pipeline\n\"\"\"\nimport asyncio\nimport logging\nimport sys\n\nimport cv2\n\nlogging.basicConfig(format=\"[%(thread)-5d]%(asctime)s: %(message)s\")\nlogger = logging.getLogger('async')\nlogger.setLevel(logging.INFO)\n\nasync def process_video(filename):\n    cap = cv2.VideoCapture(0)\n    tasks = list()\n    frame_ind = 0\n    while cap.isOpened():\n        ret, frame = cap.read()\n        if not ret:\n            break\n        logger.info(\"Processing frame {}\".format(frame_ind))\n        #tasks.append(asyncio.ensure_future(process_frame(frame, frame_ind)))\n        frame_ind += 1\n        await asyncio.sleep(0)\n    #await asyncio.gather(tasks)\n\nasync def process_frame(frame, frame_ind):\n    logger.info(\"Processing frame {}\".format(frame_ind))\n    await asyncio.sleep(15.0)\n    logger.info(\"Finished processing frame {}\".format(frame_ind))\n\ndef main():\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(process_video(sys.argv[1]))\n    logger.info(\"Completed\")\n\nif __name__ == '__main__':\n    main()\n",
			"settings":
			{
				"buffer_size": 1022,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"gitsavvy",
				"GitSavvy: help"
			],
			[
				"readm",
				"ReadmePlease"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"boxy",
				"Boxy Theme: Configuration"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"color",
				"UI: Select Color Scheme"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 134.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/admin/Downloads/dev/py",
		"/Users/admin/Downloads/dev/Smart-Bell-master/python",
		"/Users/admin/Downloads/dev/Smart-Bell-master/python/__pycache__",
		"/Users/admin/Downloads/dev/Smart-Bell-master/frontend",
		"/Users/admin/Downloads/dev/Smart-Bell-master/frontend/src",
		"/Users/admin/Downloads/dev/Smart-Bell-master/frontend/src/components",
		"/Users/admin/Downloads/dev/Smart-Bell-master/frontend/src/components/auth"
	],
	"file_history":
	[
		"/Users/admin/Downloads/dev/py/test.py",
		"/Users/admin/Downloads/dev/Smart-Bell-master/python/videostream.py",
		"/Users/admin/Downloads/dev/dash/src/layouts/Dashboard.jsx",
		"/Users/admin/Downloads/dev/py/camera.py",
		"/Users/admin/Downloads/dev/py/cli.py",
		"/Users/admin/Downloads/increasing-webcam-fps/server.js",
		"/Users/admin/Desktop/face/work_crop_align_resize/detect_faces_video.py",
		"/Users/admin/Desktop/face/work_crop_align_resize/cli.py",
		"/Users/admin/Desktop/face/work_crop_align_resize/camera.py",
		"/Users/admin/Desktop/face/work_crop_align_resize/test.py",
		"/Users/admin/Downloads/increasing-webcam-fps/build.sh",
		"/Users/admin/Downloads/increasing-webcam-fps/video.html",
		"/Users/admin/Downloads/increasing-webcam-fps/fps_demo.py",
		"/Users/admin/Desktop/face/work_crop_align_resize/test2.py",
		"/Users/admin/Library/Application Support/Sublime Text 3/Packages/GitSavvy/README.md",
		"/Users/admin/Library/Application Support/Sublime Text 3/Packages/PlainTasks/messages/Tutorial.todo",
		"/Users/admin/Library/Application Support/Sublime Text 3/Packages/PlainTasks/PlainTasks (OSX).sublime-settings",
		"/Users/admin/Desktop/face/work_crop_align_resize/package-lock.json",
		"/Users/admin/Library/Application Support/Sublime Text 3/Packages/User/.gitignore",
		"/Users/admin/Library/Application Support/Sublime Text 3/Packages/Boxy Theme/README.md",
		"/Users/admin/Downloads/dev/dash/src/index.js",
		"/Users/admin/Downloads/dev/dash/node_modules/scriptjs/vendor/mootools.js",
		"/Users/admin/Desktop/face/work_crop_align_resize/play.py",
		"/Users/admin/Downloads/dev/dash/src/views/Camera/Camera.jsx",
		"/Users/admin/Downloads/dev/dash/node_modules/progress/Makefile"
	],
	"find":
	{
		"height": 48.0
	},
	"find_in_files":
	{
		"height": 132.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"timer",
			"face_recognition",
			"unkno",
			"msg",
			"payload",
			"socke",
			"SocketIO",
			"upeo",
			"face_re",
			"webso",
			"_text",
			"testhandle",
			"image",
			"img_str",
			"gimage",
			"score",
			"gimage",
			"overlay",
			"gimage",
			"quality",
			"response",
			"awa",
			"await",
			"unex",
			"video_size",
			"logger",
			"print",
			"enum",
			"as ws",
			"logger",
			"logger.",
			"logging",
			"print",
			"control",
			"GP",
			"GPU",
			"pymo",
			"pymongo",
			"Web",
			"Vide",
			"mjpeg",
			"Webca",
			"knownall",
			"ws",
			"local",
			"ws",
			"pop",
			"length",
			"llength",
			"start",
			"startW",
			"startwi",
			"print",
			"pop",
			"None",
			"enco",
			"unkn",
			"None",
			"todo",
			"print (m",
			"print (me",
			"globa",
			"start_timer",
			"_capture",
			"prin",
			"print",
			"_capture",
			"_Str",
			"unk",
			"arra",
			"array",
			"print",
			"spli",
			"for",
			"face_recognition",
			"write",
			"exception34",
			"'ws'"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"await face_recognition",
			"logger.info",
			"logger"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": false,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "camera.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22890,
						"regions":
						{
						},
						"selection":
						[
							[
								16124,
								16124
							]
						],
						"settings":
						{
							"SL.1017.region_keys":
							[
							],
							"SL.215.region_keys":
							[
							],
							"SL.232.region_keys":
							[
							],
							"SL.238.region_keys":
							[
							],
							"SL.24.region_keys":
							[
							],
							"SL.244.region_keys":
							[
							],
							"SL.290.region_keys":
							[
							],
							"SL.335.region_keys":
							[
							],
							"SL.371.region_keys":
							[
							],
							"SL.446.region_keys":
							[
							],
							"SL.471.region_keys":
							[
							],
							"SL.610.region_keys":
							[
							],
							"SL.621.region_keys":
							[
							],
							"SL.693.region_keys":
							[
							],
							"SL.728.region_keys":
							[
							],
							"SL.743.region_keys":
							[
							],
							"SL.771.region_keys":
							[
							],
							"SL.785.region_keys":
							[
							],
							"SL.827.region_keys":
							[
							],
							"SL.869.region_keys":
							[
							],
							"SL.883.region_keys":
							[
							],
							"SL.916.region_keys":
							[
							],
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"git_savvy.repo_path": "/Users/admin/Downloads/dev/py",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 8447.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10178,
						"regions":
						{
						},
						"selection":
						[
							[
								2501,
								2524
							]
						],
						"settings":
						{
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										469,
										470
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										424,
										425
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2524,
										2525
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										2500,
										2501
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"default_dir": "/Users/admin/Downloads/dev/py",
							"git_gutter_is_enabled": false,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7283.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/Users/admin/Desktop/face/work_crop_align_resize/test.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12889,
						"regions":
						{
						},
						"selection":
						[
							[
								2467,
								2467
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2477,
										2478
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/single_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										2449,
										2450
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 531.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "cli.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2872,
						"regions":
						{
						},
						"selection":
						[
							[
								360,
								360
							]
						],
						"settings":
						{
							"SL.472.region_keys":
							[
							],
							"SL.611.region_keys":
							[
							],
							"SL.622.region_keys":
							[
							],
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"git_gutter_is_enabled": true,
							"git_savvy.repo_path": "/Users/admin/Downloads/dev/py",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 2.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/Users/admin/Downloads/dev/Smart-Bell-master/python/videostream.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2410,
						"regions":
						{
						},
						"selection":
						[
							[
								762,
								769
							]
						],
						"settings":
						{
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/Users/admin/Downloads/dev/Smart-Bell-master/python/usbcamera.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1327,
						"regions":
						{
						},
						"selection":
						[
							[
								320,
								369
							]
						],
						"settings":
						{
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 149.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "test.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7507,
						"regions":
						{
						},
						"selection":
						[
							[
								5648,
								5671
							]
						],
						"settings":
						{
							"SL.733.region_keys":
							[
							],
							"SL.886.region_keys":
							[
							],
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										5703,
										5704
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										5671,
										5672
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"git_gutter_is_enabled": true,
							"git_savvy.repo_path": "/Users/admin/Downloads/dev/py",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 741.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1647,
						"regions":
						{
						},
						"selection":
						[
							[
								1647,
								1647
							]
						],
						"settings":
						{
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1646,
										1647
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										1639,
										1640
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"default_dir": "/Users/admin/Downloads/dev/py",
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 172.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1022,
						"regions":
						{
						},
						"selection":
						[
							[
								1022,
								1022
							]
						],
						"settings":
						{
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"default_dir": "/Users/admin/Downloads/dev/py",
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 48.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 126.0
	},
	"output.find_results":
	{
		"height": 118.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "py.sublime-project",
	"replace":
	{
		"height": 90.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"camera",
				"dash/src/views/Camera/Camera.jsx"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Downloads/dev/dash/dash.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 357.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"retur",
				"returns"
			],
			[
				"",
				"$(EXAMPLES)"
			]
		],
		"width": 1215.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 128.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
